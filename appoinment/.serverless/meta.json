{
  "C:\\Repositorios\\serverless\\appoinment\\serverless.yml": {
    "versionFramework": "4.18.2",
    "servicePath": "C:\\Repositorios\\serverless\\appoinment\\serverless.yml",
    "serviceConfigFileName": "serverless.yml",
    "service": {
      "org": "myorgluis",
      "service": "appoinment",
      "provider": {
        "name": "aws",
        "runtime": "nodejs20.x",
        "region": "us-east-1",
        "httpApi": {
          "cors": true
        },
        "environment": {
          "DDB_TABLE": "AppointmentsTable",
          "APPOINTMENT_TOPIC_ARN": {
            "Ref": "AppointmentTopic"
          },
          "EVENT_BUS_NAME": "default",
          "PE_DB_HOST": "dbappointment.c2jccqskykox.us-east-1.rds.amazonaws.com",
          "PE_DB_PORT": "3306",
          "PE_DB_USER": "admin",
          "PE_DB_PASS": "Softtek#2023",
          "PE_DB_NAME": "app_pe",
          "CL_DB_HOST": "dbappointment.c2jccqskykox.us-east-1.rds.amazonaws.com",
          "CL_DB_PORT": "3306",
          "CL_DB_USER": "admin",
          "CL_DB_PASS": "Softtek#2023",
          "CL_DB_NAME": "app_cl"
        },
        "iam": {
          "role": {
            "statements": [
              {
                "Effect": "Allow",
                "Action": [
                  "dynamodb:PutItem",
                  "dynamodb:UpdateItem",
                  "dynamodb:GetItem",
                  "dynamodb:Query"
                ],
                "Resource": [
                  "arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/AppointmentsTable",
                  "arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/AppointmentsTable/index/InsuredGSI"
                ]
              },
              {
                "Effect": "Allow",
                "Action": "sns:Publish",
                "Resource": {
                  "Ref": "AppointmentTopic"
                }
              },
              {
                "Effect": "Allow",
                "Action": "events:PutEvents",
                "Resource": "*"
              }
            ]
          }
        }
      },
      "plugins": [
        "serverless-offline"
      ],
      "functions": {
        "appointment": {
          "handler": "src/Interfaces/Http/appointment.router",
          "events": [
            {
              "httpApi": {
                "path": "/appointments",
                "method": "post"
              }
            },
            {
              "httpApi": {
                "path": "/appointments/{insuredId}",
                "method": "get"
              }
            },
            {
              "sqs": {
                "arn": {
                  "Fn::GetAtt": [
                    "ConfirmationQueue",
                    "Arn"
                  ]
                },
                "batchSize": 1
              }
            }
          ]
        },
        "appointment_pe": {
          "handler": "src/Interfaces/Workers/appointment_pe.handler",
          "events": [
            {
              "sqs": {
                "arn": {
                  "Fn::GetAtt": [
                    "SqsPE",
                    "Arn"
                  ]
                },
                "batchSize": 1,
                "maximumBatchingWindow": 0
              }
            }
          ]
        },
        "appointment_cl": {
          "handler": "src/Interfaces/Workers/appointment_cl.handler",
          "events": [
            {
              "sqs": {
                "arn": {
                  "Fn::GetAtt": [
                    "SqsCL",
                    "Arn"
                  ]
                },
                "batchSize": 1,
                "maximumBatchingWindow": 0
              }
            }
          ]
        },
        "docs": {
          "handler": "src/Interfaces/Http/docs.handler",
          "events": [
            {
              "httpApi": {
                "path": "/docs",
                "method": "get"
              }
            }
          ]
        }
      },
      "resources": {
        "Resources": {
          "AppointmentsTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "AppointmentsTable",
              "BillingMode": "PAY_PER_REQUEST",
              "AttributeDefinitions": [
                {
                  "AttributeName": "appointmentId",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "insuredId",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "appointmentId",
                  "KeyType": "HASH"
                }
              ],
              "GlobalSecondaryIndexes": [
                {
                  "IndexName": "InsuredGSI",
                  "KeySchema": [
                    {
                      "AttributeName": "insuredId",
                      "KeyType": "HASH"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                }
              ]
            }
          },
          "AppointmentTopic": {
            "Type": "AWS::SNS::Topic",
            "Properties": {
              "TopicName": "appointment-topic"
            }
          },
          "SqsPE": {
            "Type": "AWS::SQS::Queue",
            "Properties": {
              "QueueName": "SQS_PE"
            }
          },
          "SqsCL": {
            "Type": "AWS::SQS::Queue",
            "Properties": {
              "QueueName": "SQS_CL"
            }
          },
          "SnsSubPE": {
            "Type": "AWS::SNS::Subscription",
            "Properties": {
              "TopicArn": {
                "Ref": "AppointmentTopic"
              },
              "Protocol": "sqs",
              "Endpoint": {
                "Fn::GetAtt": [
                  "SqsPE",
                  "Arn"
                ]
              },
              "FilterPolicy": {
                "countryISO": [
                  "PE"
                ]
              }
            }
          },
          "SnsSubCL": {
            "Type": "AWS::SNS::Subscription",
            "Properties": {
              "TopicArn": {
                "Ref": "AppointmentTopic"
              },
              "Protocol": "sqs",
              "Endpoint": {
                "Fn::GetAtt": [
                  "SqsCL",
                  "Arn"
                ]
              },
              "FilterPolicy": {
                "countryISO": [
                  "CL"
                ]
              }
            }
          },
          "SqsPEPolicy": {
            "Type": "AWS::SQS::QueuePolicy",
            "Properties": {
              "Queues": [
                {
                  "Ref": "SqsPE"
                }
              ],
              "PolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": "sns.amazonaws.com"
                    },
                    "Action": "SQS:SendMessage",
                    "Resource": {
                      "Fn::GetAtt": [
                        "SqsPE",
                        "Arn"
                      ]
                    },
                    "Condition": {
                      "ArnEquals": {
                        "aws:SourceArn": {
                          "Ref": "AppointmentTopic"
                        }
                      }
                    }
                  }
                ]
              }
            }
          },
          "SqsCLPolicy": {
            "Type": "AWS::SQS::QueuePolicy",
            "Properties": {
              "Queues": [
                {
                  "Ref": "SqsCL"
                }
              ],
              "PolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": "sns.amazonaws.com"
                    },
                    "Action": "SQS:SendMessage",
                    "Resource": {
                      "Fn::GetAtt": [
                        "SqsCL",
                        "Arn"
                      ]
                    },
                    "Condition": {
                      "ArnEquals": {
                        "aws:SourceArn": {
                          "Ref": "AppointmentTopic"
                        }
                      }
                    }
                  }
                ]
              }
            }
          },
          "ConfirmationQueue": {
            "Type": "AWS::SQS::Queue",
            "Properties": {
              "QueueName": "SQS_CONFIRMATION"
            }
          },
          "AppointmentConfirmedRule": {
            "Type": "AWS::Events::Rule",
            "Properties": {
              "Name": "appointment-confirmed-rule",
              "EventBusName": "default",
              "EventPattern": {
                "source": [
                  "rimac.appointment"
                ],
                "detail-type": [
                  "AppointmentConfirmed"
                ]
              },
              "Targets": [
                {
                  "Arn": {
                    "Fn::GetAtt": [
                      "ConfirmationQueue",
                      "Arn"
                    ]
                  },
                  "Id": "ConfirmationTarget"
                }
              ]
            }
          },
          "ConfirmationQueuePolicy": {
            "Type": "AWS::SQS::QueuePolicy",
            "Properties": {
              "Queues": [
                {
                  "Ref": "ConfirmationQueue"
                }
              ],
              "PolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": "events.amazonaws.com"
                    },
                    "Action": "SQS:SendMessage",
                    "Resource": {
                      "Fn::GetAtt": [
                        "ConfirmationQueue",
                        "Arn"
                      ]
                    }
                  }
                ]
              }
            }
          }
        }
      }
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs20.x",
      "region": "us-east-1",
      "httpApi": {
        "cors": true
      },
      "environment": {
        "DDB_TABLE": "AppointmentsTable",
        "APPOINTMENT_TOPIC_ARN": {
          "Ref": "AppointmentTopic"
        },
        "EVENT_BUS_NAME": "default",
        "PE_DB_HOST": "dbappointment.c2jccqskykox.us-east-1.rds.amazonaws.com",
        "PE_DB_PORT": "3306",
        "PE_DB_USER": "admin",
        "PE_DB_PASS": "Softtek#2023",
        "PE_DB_NAME": "app_pe",
        "CL_DB_HOST": "dbappointment.c2jccqskykox.us-east-1.rds.amazonaws.com",
        "CL_DB_PORT": "3306",
        "CL_DB_USER": "admin",
        "CL_DB_PASS": "Softtek#2023",
        "CL_DB_NAME": "app_cl"
      },
      "iam": {
        "role": {
          "statements": [
            {
              "Effect": "Allow",
              "Action": [
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:GetItem",
                "dynamodb:Query"
              ],
              "Resource": [
                "arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/AppointmentsTable",
                "arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/AppointmentsTable/index/InsuredGSI"
              ]
            },
            {
              "Effect": "Allow",
              "Action": "sns:Publish",
              "Resource": {
                "Ref": "AppointmentTopic"
              }
            },
            {
              "Effect": "Allow",
              "Action": "events:PutEvents",
              "Resource": "*"
            }
          ]
        }
      }
    },
    "error": {
      "message": "request to https://core.serverless.com/api/bff/ failed, reason: getaddrinfo ENOTFOUND core.serverless.com",
      "stack": "Error: request to https://core.serverless.com/api/bff/ failed, reason: getaddrinfo ENOTFOUND core.serverless.com\n    at Authentication.getClientDataFromAccessKey (file:///C:/Users/luis.cuya/.serverless/releases/4.18.2/package/dist/sf-core.js:808:18758)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async Authentication.getAuthenticatedData (file:///C:/Users/luis.cuya/.serverless/releases/4.18.2/package/dist/sf-core.js:808:3689)\n    at async Authentication.authenticate (file:///C:/Users/luis.cuya/.serverless/releases/4.18.2/package/dist/sf-core.js:808:22245)\n    at async TraditionalRunner.resolveVariablesAndAuthenticate (file:///C:/Users/luis.cuya/.serverless/releases/4.18.2/package/dist/sf-core.js:812:2379)\n    at async TraditionalRunner.run (file:///C:/Users/luis.cuya/.serverless/releases/4.18.2/package/dist/sf-core.js:1428:27914)\n    at async route (file:///C:/Users/luis.cuya/.serverless/releases/4.18.2/package/dist/sf-core.js:1603:2878)\n    at async Object.run (file:///C:/Users/luis.cuya/.serverless/releases/4.18.2/package/dist/sf-core.js:1604:3661)\n    at async run2 (file:///C:/Users/luis.cuya/.serverless/releases/4.18.2/package/dist/sf-core.js:1604:4815)"
    },
    "serviceRawFile": "org: myorgluis\nservice: appoinment\n\nprovider:\n  name: aws\n  runtime: nodejs20.x\n  region: us-east-1\n  httpApi:\n    cors: true\n  environment:\n    DDB_TABLE: AppointmentsTable\n    APPOINTMENT_TOPIC_ARN: !Ref AppointmentTopic  \n    EVENT_BUS_NAME: default\n    # --- Conexión a MySQL para Perú\n    PE_DB_HOST: dbappointment.c2jccqskykox.us-east-1.rds.amazonaws.com\n    PE_DB_PORT: \"3306\"\n    PE_DB_USER: admin\n    PE_DB_PASS: \"Softtek#2023\"\n    PE_DB_NAME: app_pe\n\n    # --- Conexión a MySQL para Chile ---\n    CL_DB_HOST: dbappointment.c2jccqskykox.us-east-1.rds.amazonaws.com\n    CL_DB_PORT: \"3306\"\n    CL_DB_USER: admin\n    CL_DB_PASS: \"Softtek#2023\"\n    CL_DB_NAME: app_cl\n  iam:\n    role:\n      statements:\n        # DynamoDB\n        - Effect: Allow\n          Action:\n            - dynamodb:PutItem\n            - dynamodb:UpdateItem\n            - dynamodb:GetItem\n            - dynamodb:Query\n          Resource:\n            - arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/AppointmentsTable\n            - arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/AppointmentsTable/index/InsuredGSI\n        # SNS\n        - Effect: Allow\n          Action: sns:Publish\n          Resource: !Ref AppointmentTopic\n        \n        # EventBridge\n        - Effect: Allow\n          Action: events:PutEvents\n          Resource: \"*\"\n\nplugins:\n  - serverless-offline\n\nfunctions:\n  appointment:\n    handler: src/Interfaces/Http/appointment.router\n    events:\n      - httpApi:\n          path: /appointments\n          method: post\n      - httpApi:\n          path: /appointments/{insuredId}\n          method: get\n      - sqs:\n          arn: { Fn::GetAtt: [ ConfirmationQueue, Arn ] }\n          batchSize: 1\n  appointment_pe:\n    handler: src/Interfaces/Workers/appointment_pe.handler\n    events:\n      - sqs:\n          arn: { Fn::GetAtt: [ SqsPE, Arn ] }\n          batchSize: 1\n          maximumBatchingWindow: 0\n  appointment_cl:\n    handler: src/Interfaces/Workers/appointment_cl.handler\n    events:\n      - sqs:\n          arn: { Fn::GetAtt: [ SqsCL, Arn ] }\n          batchSize: 1\n          maximumBatchingWindow: 0\n  docs:\n    handler: src/Interfaces/Http/docs.handler\n    events:\n      - httpApi:\n          path: /docs\n          method: get  \n\nresources:\n  Resources:\n    # DynamoDB\n    AppointmentsTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: AppointmentsTable\n        BillingMode: PAY_PER_REQUEST\n        AttributeDefinitions:\n          - AttributeName: appointmentId\n            AttributeType: S\n          - AttributeName: insuredId\n            AttributeType: S\n        KeySchema:\n          - AttributeName: appointmentId\n            KeyType: HASH\n        GlobalSecondaryIndexes:\n          - IndexName: InsuredGSI\n            KeySchema:\n              - AttributeName: insuredId\n                KeyType: HASH\n            Projection:\n              ProjectionType: ALL\n\n    # SNS Topic\n    AppointmentTopic:\n      Type: AWS::SNS::Topic\n      Properties:\n        TopicName: appointment-topic\n\n    # --- SQS por país ---\n    SqsPE:\n      Type: AWS::SQS::Queue\n      Properties:\n        QueueName: SQS_PE\n\n    SqsCL:\n      Type: AWS::SQS::Queue\n      Properties:\n        QueueName: SQS_CL\n\n    # --- Suscripciones SNS -> SQS con filtro por countryISO ---\n    SnsSubPE:\n      Type: AWS::SNS::Subscription\n      Properties:\n        TopicArn: !Ref AppointmentTopic\n        Protocol: sqs\n        Endpoint: !GetAtt SqsPE.Arn\n        FilterPolicy:\n          countryISO: [ \"PE\" ]\n\n    SnsSubCL:\n      Type: AWS::SNS::Subscription\n      Properties:\n        TopicArn: !Ref AppointmentTopic\n        Protocol: sqs\n        Endpoint: !GetAtt SqsCL.Arn\n        FilterPolicy:\n          countryISO: [ \"CL\" ]\n\n    # --- Policies para permitir a SNS enviar a SQS ---\n    SqsPEPolicy:\n      Type: AWS::SQS::QueuePolicy\n      Properties:\n        Queues: [ !Ref SqsPE ]\n        PolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal: { Service: sns.amazonaws.com }\n              Action: SQS:SendMessage\n              Resource: !GetAtt SqsPE.Arn\n              Condition:\n                ArnEquals:\n                  aws:SourceArn: !Ref AppointmentTopic\n\n    SqsCLPolicy:\n      Type: AWS::SQS::QueuePolicy\n      Properties:\n        Queues: [ !Ref SqsCL ]\n        PolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal: { Service: sns.amazonaws.com }\n              Action: SQS:SendMessage\n              Resource: !GetAtt SqsCL.Arn\n              Condition:\n                ArnEquals:\n                  aws:SourceArn: !Ref AppointmentTopic\n              \n    ConfirmationQueue:\n      Type: AWS::SQS::Queue\n      Properties: { QueueName: SQS_CONFIRMATION }\n\n    AppointmentConfirmedRule:\n      Type: AWS::Events::Rule\n      Properties:\n        Name: appointment-confirmed-rule\n        EventBusName: default\n        EventPattern:\n          source: [ \"rimac.appointment\" ]\n          detail-type: [ \"AppointmentConfirmed\" ]\n        Targets:\n          - Arn: !GetAtt ConfirmationQueue.Arn\n            Id: ConfirmationTarget\n\n    ConfirmationQueuePolicy:\n      Type: AWS::SQS::QueuePolicy\n      Properties:\n        Queues: [ !Ref ConfirmationQueue ]\n        PolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal: { Service: events.amazonaws.com }\n              Action: SQS:SendMessage\n              Resource: !GetAtt ConfirmationQueue.Arn",
    "command": [
      "offline"
    ],
    "options": {},
    "serviceProviderAwsCfStackId": "arn:aws:cloudformation:us-east-1:157051741410:stack/appoinment-dev/9c757440-8a08-11f0-8714-0affe917e6ad",
    "serviceProviderAwsCfStackCreated": "2025-09-05T03:30:03.935Z",
    "serviceProviderAwsCfStackUpdated": "2025-09-05T17:15:47.450Z",
    "serviceProviderAwsCfStackStatus": "UPDATE_COMPLETE",
    "serviceProviderAwsCfStackOutputs": [
      {
        "OutputKey": "AppointmentLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:157051741410:function:appoinment-dev-appointment:8",
        "Description": "Current Lambda function version",
        "ExportName": "sls-appoinment-dev-AppointmentLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "AppointmentUnderscoreclLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:157051741410:function:appoinment-dev-appointment_cl:5",
        "Description": "Current Lambda function version",
        "ExportName": "sls-appoinment-dev-AppointmentUnderscoreclLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "DocsLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:157051741410:function:appoinment-dev-docs:2",
        "Description": "Current Lambda function version",
        "ExportName": "sls-appoinment-dev-DocsLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "AppointmentUnderscorepeLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:157051741410:function:appoinment-dev-appointment_pe:5",
        "Description": "Current Lambda function version",
        "ExportName": "sls-appoinment-dev-AppointmentUnderscorepeLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "HttpApiId",
        "OutputValue": "yj6hb7xlw1",
        "Description": "Id of the HTTP API",
        "ExportName": "sls-appoinment-dev-HttpApiId"
      },
      {
        "OutputKey": "ServerlessDeploymentBucketName",
        "OutputValue": "serverless-framework-deployments-us-east-1-55023442-a1fe",
        "ExportName": "sls-appoinment-dev-ServerlessDeploymentBucketName"
      },
      {
        "OutputKey": "HttpApiUrl",
        "OutputValue": "https://yj6hb7xlw1.execute-api.us-east-1.amazonaws.com",
        "Description": "URL of the HTTP API",
        "ExportName": "sls-appoinment-dev-HttpApiUrl"
      }
    ]
  }
}