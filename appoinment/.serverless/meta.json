{
  "C:\\Repositorios\\serverless\\appoinment\\serverless.yml": {
    "versionFramework": "4.18.2",
    "servicePath": "C:\\Repositorios\\serverless\\appoinment\\serverless.yml",
    "serviceConfigFileName": "serverless.yml",
    "service": {
      "org": "myorgluis",
      "service": "appoinment",
      "provider": {
        "name": "aws",
        "runtime": "nodejs20.x",
        "region": "us-east-1",
        "httpApi": {
          "cors": true
        },
        "environment": {
          "DDB_TABLE": "AppointmentsTable",
          "APPOINTMENT_TOPIC_ARN": {
            "Ref": "AppointmentTopic"
          },
          "EVENT_BUS_NAME": "default",
          "PE_DB_HOST": "dbappointment.c2jccqskykox.us-east-1.rds.amazonaws.com",
          "PE_DB_PORT": "3306",
          "PE_DB_USER": "admin",
          "PE_DB_PASS": "Softtek#2023",
          "PE_DB_NAME": "app_pe",
          "CL_DB_HOST": "dbappointment.c2jccqskykox.us-east-1.rds.amazonaws.com",
          "CL_DB_PORT": "3306",
          "CL_DB_USER": "admin",
          "CL_DB_PASS": "Softtek#2023",
          "CL_DB_NAME": "app_cl"
        },
        "iam": {
          "role": {
            "statements": [
              {
                "Effect": "Allow",
                "Action": [
                  "dynamodb:PutItem",
                  "dynamodb:UpdateItem",
                  "dynamodb:GetItem",
                  "dynamodb:Query"
                ],
                "Resource": [
                  "arn:aws:dynamodb:us-east-1:157051741410:table/AppointmentsTable",
                  "arn:aws:dynamodb:us-east-1:157051741410:table/AppointmentsTable/index/InsuredGSI"
                ]
              },
              {
                "Effect": "Allow",
                "Action": [
                  "sns:Publish"
                ],
                "Resource": {
                  "Ref": "AppointmentTopic"
                }
              },
              {
                "Effect": "Allow",
                "Action": [
                  "events:PutEvents"
                ],
                "Resource": "*"
              }
            ]
          }
        },
        "stage": "dev",
        "versionFunctions": true,
        "compiledCloudFormationTemplate": {
          "AWSTemplateFormatVersion": "2010-09-09",
          "Description": "The AWS CloudFormation template for this Serverless application",
          "Resources": {
            "AppointmentLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/appoinment-dev-appointment"
              }
            },
            "AppointmentUnderscorepeLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/appoinment-dev-appointment_pe"
              }
            },
            "AppointmentUnderscoreclLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/appoinment-dev-appointment_cl"
              }
            },
            "DocsLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/appoinment-dev-docs"
              }
            },
            "IamRoleLambdaExecution": {
              "Type": "AWS::IAM::Role",
              "Properties": {
                "AssumeRolePolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Principal": {
                        "Service": [
                          "lambda.amazonaws.com"
                        ]
                      },
                      "Action": [
                        "sts:AssumeRole"
                      ]
                    }
                  ]
                },
                "Policies": [
                  {
                    "PolicyName": {
                      "Fn::Join": [
                        "-",
                        [
                          "appoinment",
                          "dev",
                          "lambda"
                        ]
                      ]
                    },
                    "PolicyDocument": {
                      "Version": "2012-10-17",
                      "Statement": [
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:CreateLogStream",
                            "logs:CreateLogGroup",
                            "logs:TagResource"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/appoinment-dev*:*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:PutLogEvents"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/appoinment-dev*:*:*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "dynamodb:PutItem",
                            "dynamodb:UpdateItem",
                            "dynamodb:GetItem",
                            "dynamodb:Query"
                          ],
                          "Resource": [
                            "arn:aws:dynamodb:us-east-1:157051741410:table/AppointmentsTable",
                            "arn:aws:dynamodb:us-east-1:157051741410:table/AppointmentsTable/index/InsuredGSI"
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "sns:Publish"
                          ],
                          "Resource": {
                            "Ref": "AppointmentTopic"
                          }
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "events:PutEvents"
                          ],
                          "Resource": "*"
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "sqs:ReceiveMessage",
                            "sqs:DeleteMessage",
                            "sqs:GetQueueAttributes"
                          ],
                          "Resource": [
                            {
                              "Fn::GetAtt": [
                                "ConfirmationQueue",
                                "Arn"
                              ]
                            },
                            {
                              "Fn::GetAtt": [
                                "SqsPE",
                                "Arn"
                              ]
                            },
                            {
                              "Fn::GetAtt": [
                                "SqsCL",
                                "Arn"
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  }
                ],
                "Path": "/",
                "RoleName": {
                  "Fn::Join": [
                    "-",
                    [
                      "appoinment",
                      "dev",
                      {
                        "Ref": "AWS::Region"
                      },
                      "lambdaRole"
                    ]
                  ]
                }
              }
            },
            "AppointmentLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-55023442-a1fe",
                  "S3Key": "serverless/appoinment/dev/1757107576965-2025-09-05T21:26:16.965Z/appoinment.zip"
                },
                "Handler": "src/Interfaces/Http/appointment.router",
                "Runtime": "nodejs20.x",
                "FunctionName": "appoinment-dev-appointment",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "DDB_TABLE": "AppointmentsTable",
                    "APPOINTMENT_TOPIC_ARN": {
                      "Ref": "AppointmentTopic"
                    },
                    "EVENT_BUS_NAME": "default",
                    "PE_DB_HOST": "dbappointment.c2jccqskykox.us-east-1.rds.amazonaws.com",
                    "PE_DB_PORT": "3306",
                    "PE_DB_USER": "admin",
                    "PE_DB_PASS": "Softtek#2023",
                    "PE_DB_NAME": "app_pe",
                    "CL_DB_HOST": "dbappointment.c2jccqskykox.us-east-1.rds.amazonaws.com",
                    "CL_DB_PORT": "3306",
                    "CL_DB_USER": "admin",
                    "CL_DB_PASS": "Softtek#2023",
                    "CL_DB_NAME": "app_cl",
                    "NODE_OPTIONS": "--enable-source-maps"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "AppointmentLogGroup"
              ]
            },
            "AppointmentUnderscorepeLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-55023442-a1fe",
                  "S3Key": "serverless/appoinment/dev/1757107576965-2025-09-05T21:26:16.965Z/appoinment.zip"
                },
                "Handler": "src/Interfaces/Workers/appointment_pe.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "appoinment-dev-appointment_pe",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "DDB_TABLE": "AppointmentsTable",
                    "APPOINTMENT_TOPIC_ARN": {
                      "Ref": "AppointmentTopic"
                    },
                    "EVENT_BUS_NAME": "default",
                    "PE_DB_HOST": "dbappointment.c2jccqskykox.us-east-1.rds.amazonaws.com",
                    "PE_DB_PORT": "3306",
                    "PE_DB_USER": "admin",
                    "PE_DB_PASS": "Softtek#2023",
                    "PE_DB_NAME": "app_pe",
                    "CL_DB_HOST": "dbappointment.c2jccqskykox.us-east-1.rds.amazonaws.com",
                    "CL_DB_PORT": "3306",
                    "CL_DB_USER": "admin",
                    "CL_DB_PASS": "Softtek#2023",
                    "CL_DB_NAME": "app_cl",
                    "NODE_OPTIONS": "--enable-source-maps"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "AppointmentUnderscorepeLogGroup"
              ]
            },
            "AppointmentUnderscoreclLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-55023442-a1fe",
                  "S3Key": "serverless/appoinment/dev/1757107576965-2025-09-05T21:26:16.965Z/appoinment.zip"
                },
                "Handler": "src/Interfaces/Workers/appointment_cl.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "appoinment-dev-appointment_cl",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "DDB_TABLE": "AppointmentsTable",
                    "APPOINTMENT_TOPIC_ARN": {
                      "Ref": "AppointmentTopic"
                    },
                    "EVENT_BUS_NAME": "default",
                    "PE_DB_HOST": "dbappointment.c2jccqskykox.us-east-1.rds.amazonaws.com",
                    "PE_DB_PORT": "3306",
                    "PE_DB_USER": "admin",
                    "PE_DB_PASS": "Softtek#2023",
                    "PE_DB_NAME": "app_pe",
                    "CL_DB_HOST": "dbappointment.c2jccqskykox.us-east-1.rds.amazonaws.com",
                    "CL_DB_PORT": "3306",
                    "CL_DB_USER": "admin",
                    "CL_DB_PASS": "Softtek#2023",
                    "CL_DB_NAME": "app_cl",
                    "NODE_OPTIONS": "--enable-source-maps"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "AppointmentUnderscoreclLogGroup"
              ]
            },
            "DocsLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-55023442-a1fe",
                  "S3Key": "serverless/appoinment/dev/1757107576965-2025-09-05T21:26:16.965Z/appoinment.zip"
                },
                "Handler": "src/Interfaces/Http/docs.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "appoinment-dev-docs",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "DDB_TABLE": "AppointmentsTable",
                    "APPOINTMENT_TOPIC_ARN": {
                      "Ref": "AppointmentTopic"
                    },
                    "EVENT_BUS_NAME": "default",
                    "PE_DB_HOST": "dbappointment.c2jccqskykox.us-east-1.rds.amazonaws.com",
                    "PE_DB_PORT": "3306",
                    "PE_DB_USER": "admin",
                    "PE_DB_PASS": "Softtek#2023",
                    "PE_DB_NAME": "app_pe",
                    "CL_DB_HOST": "dbappointment.c2jccqskykox.us-east-1.rds.amazonaws.com",
                    "CL_DB_PORT": "3306",
                    "CL_DB_USER": "admin",
                    "CL_DB_PASS": "Softtek#2023",
                    "CL_DB_NAME": "app_cl",
                    "NODE_OPTIONS": "--enable-source-maps"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "DocsLogGroup"
              ]
            },
            "AppointmentLambdaVersion5ddrka76T0EJ1UpxDE0C5eaCAQkXoNtBQQmosIi9Rs": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "AppointmentLambdaFunction"
                },
                "CodeSha256": "UNjfQWT0BwoWO0FMOsygaOKIt6n+7G/ehxnryA0PyRc="
              }
            },
            "AppointmentUnderscorepeLambdaVersionvRNSxSKVv5aEQsP84xNm7ZrWIKIBrppLxszX5zNq9Io": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "AppointmentUnderscorepeLambdaFunction"
                },
                "CodeSha256": "UNjfQWT0BwoWO0FMOsygaOKIt6n+7G/ehxnryA0PyRc="
              }
            },
            "AppointmentUnderscoreclLambdaVersionuEfTJCqQbZyHrWORWiV2SClsV9q2smJYDNgOefa0": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "AppointmentUnderscoreclLambdaFunction"
                },
                "CodeSha256": "UNjfQWT0BwoWO0FMOsygaOKIt6n+7G/ehxnryA0PyRc="
              }
            },
            "DocsLambdaVersionhJ7rCR9rr4QGFb1JnRUiZnFs0rz8YIYcLR60Eq0gp60": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "DocsLambdaFunction"
                },
                "CodeSha256": "UNjfQWT0BwoWO0FMOsygaOKIt6n+7G/ehxnryA0PyRc="
              }
            },
            "AppointmentEventSourceMappingSQSConfirmationQueue": {
              "Type": "AWS::Lambda::EventSourceMapping",
              "DependsOn": [
                "IamRoleLambdaExecution"
              ],
              "Properties": {
                "BatchSize": 1,
                "EventSourceArn": {
                  "Fn::GetAtt": [
                    "ConfirmationQueue",
                    "Arn"
                  ]
                },
                "FunctionName": {
                  "Fn::GetAtt": [
                    "AppointmentLambdaFunction",
                    "Arn"
                  ]
                },
                "Enabled": true
              }
            },
            "AppointmentUnderscorepeEventSourceMappingSQSSqsPE": {
              "Type": "AWS::Lambda::EventSourceMapping",
              "DependsOn": [
                "IamRoleLambdaExecution"
              ],
              "Properties": {
                "BatchSize": 1,
                "MaximumBatchingWindowInSeconds": 0,
                "EventSourceArn": {
                  "Fn::GetAtt": [
                    "SqsPE",
                    "Arn"
                  ]
                },
                "FunctionName": {
                  "Fn::GetAtt": [
                    "AppointmentUnderscorepeLambdaFunction",
                    "Arn"
                  ]
                },
                "Enabled": true
              }
            },
            "AppointmentUnderscoreclEventSourceMappingSQSSqsCL": {
              "Type": "AWS::Lambda::EventSourceMapping",
              "DependsOn": [
                "IamRoleLambdaExecution"
              ],
              "Properties": {
                "BatchSize": 1,
                "MaximumBatchingWindowInSeconds": 0,
                "EventSourceArn": {
                  "Fn::GetAtt": [
                    "SqsCL",
                    "Arn"
                  ]
                },
                "FunctionName": {
                  "Fn::GetAtt": [
                    "AppointmentUnderscoreclLambdaFunction",
                    "Arn"
                  ]
                },
                "Enabled": true
              }
            },
            "HttpApi": {
              "Type": "AWS::ApiGatewayV2::Api",
              "Properties": {
                "Name": "dev-appoinment",
                "ProtocolType": "HTTP",
                "CorsConfiguration": {
                  "AllowCredentials": "<REDACTED>",
                  "AllowHeaders": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "AllowMethods": [
                    "OPTIONS",
                    "POST",
                    "GET"
                  ],
                  "AllowOrigins": [
                    "*"
                  ]
                }
              }
            },
            "HttpApiStage": {
              "Type": "AWS::ApiGatewayV2::Stage",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "StageName": "$default",
                "AutoDeploy": true,
                "DefaultRouteSettings": {
                  "DetailedMetricsEnabled": false
                }
              }
            },
            "AppointmentLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "AppointmentLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationAppointment": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "AppointmentLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRoutePostAppointments": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "POST /appointments",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationAppointment"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationAppointment"
            },
            "HttpApiRouteGetAppointmentsInsuredidVar": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "GET /appointments/{insuredId}",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationAppointment"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationAppointment"
            },
            "DocsLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "DocsLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationDocs": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "DocsLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRouteGetDocs": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "GET /docs",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationDocs"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationDocs"
            },
            "AppointmentsTable": {
              "Type": "AWS::DynamoDB::Table",
              "Properties": {
                "TableName": "AppointmentsTable",
                "BillingMode": "PAY_PER_REQUEST",
                "AttributeDefinitions": [
                  {
                    "AttributeName": "appointmentId",
                    "AttributeType": "S"
                  },
                  {
                    "AttributeName": "insuredId",
                    "AttributeType": "S"
                  }
                ],
                "KeySchema": [
                  {
                    "AttributeName": "appointmentId",
                    "KeyType": "HASH"
                  }
                ],
                "GlobalSecondaryIndexes": [
                  {
                    "IndexName": "InsuredGSI",
                    "KeySchema": [
                      {
                        "AttributeName": "insuredId",
                        "KeyType": "HASH"
                      }
                    ],
                    "Projection": {
                      "ProjectionType": "ALL"
                    }
                  }
                ]
              }
            },
            "AppointmentTopic": {
              "Type": "AWS::SNS::Topic",
              "Properties": {
                "TopicName": "appointment-topic"
              }
            },
            "SqsPE": {
              "Type": "AWS::SQS::Queue",
              "Properties": {
                "QueueName": "SQS_PE"
              }
            },
            "SqsCL": {
              "Type": "AWS::SQS::Queue",
              "Properties": {
                "QueueName": "SQS_CL"
              }
            },
            "SnsSubPE": {
              "Type": "AWS::SNS::Subscription",
              "Properties": {
                "TopicArn": {
                  "Ref": "AppointmentTopic"
                },
                "Protocol": "sqs",
                "Endpoint": {
                  "Fn::GetAtt": [
                    "SqsPE",
                    "Arn"
                  ]
                },
                "FilterPolicy": {
                  "countryISO": [
                    "PE"
                  ]
                }
              }
            },
            "SnsSubCL": {
              "Type": "AWS::SNS::Subscription",
              "Properties": {
                "TopicArn": {
                  "Ref": "AppointmentTopic"
                },
                "Protocol": "sqs",
                "Endpoint": {
                  "Fn::GetAtt": [
                    "SqsCL",
                    "Arn"
                  ]
                },
                "FilterPolicy": {
                  "countryISO": [
                    "CL"
                  ]
                }
              }
            },
            "SqsPEPolicy": {
              "Type": "AWS::SQS::QueuePolicy",
              "Properties": {
                "Queues": [
                  {
                    "Ref": "SqsPE"
                  }
                ],
                "PolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Principal": {
                        "Service": "sns.amazonaws.com"
                      },
                      "Action": "SQS:SendMessage",
                      "Resource": {
                        "Fn::GetAtt": [
                          "SqsPE",
                          "Arn"
                        ]
                      },
                      "Condition": {
                        "ArnEquals": {
                          "aws:SourceArn": {
                            "Ref": "AppointmentTopic"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            },
            "SqsCLPolicy": {
              "Type": "AWS::SQS::QueuePolicy",
              "Properties": {
                "Queues": [
                  {
                    "Ref": "SqsCL"
                  }
                ],
                "PolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Principal": {
                        "Service": "sns.amazonaws.com"
                      },
                      "Action": "SQS:SendMessage",
                      "Resource": {
                        "Fn::GetAtt": [
                          "SqsCL",
                          "Arn"
                        ]
                      },
                      "Condition": {
                        "ArnEquals": {
                          "aws:SourceArn": {
                            "Ref": "AppointmentTopic"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            },
            "ConfirmationQueue": {
              "Type": "AWS::SQS::Queue",
              "Properties": {
                "QueueName": "SQS_CONFIRMATION"
              }
            },
            "AppointmentConfirmedRule": {
              "Type": "AWS::Events::Rule",
              "Properties": {
                "Name": "appointment-confirmed-rule",
                "EventBusName": "default",
                "EventPattern": {
                  "source": [
                    "rimac.appointment"
                  ],
                  "detail-type": [
                    "AppointmentConfirmed"
                  ]
                },
                "Targets": [
                  {
                    "Arn": {
                      "Fn::GetAtt": [
                        "ConfirmationQueue",
                        "Arn"
                      ]
                    },
                    "Id": "ConfirmationTarget"
                  }
                ]
              }
            },
            "ConfirmationQueuePolicy": {
              "Type": "AWS::SQS::QueuePolicy",
              "Properties": {
                "Queues": [
                  {
                    "Ref": "ConfirmationQueue"
                  }
                ],
                "PolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Principal": {
                        "Service": "events.amazonaws.com"
                      },
                      "Action": "SQS:SendMessage",
                      "Resource": {
                        "Fn::GetAtt": [
                          "ConfirmationQueue",
                          "Arn"
                        ]
                      }
                    }
                  ]
                }
              }
            }
          },
          "Outputs": {
            "ServerlessDeploymentBucketName": {
              "Value": "serverless-framework-deployments-us-east-1-55023442-a1fe",
              "Export": {
                "Name": "sls-appoinment-dev-ServerlessDeploymentBucketName"
              }
            },
            "AppointmentLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "AppointmentLambdaVersion5ddrka76T0EJ1UpxDE0C5eaCAQkXoNtBQQmosIi9Rs"
              },
              "Export": {
                "Name": "sls-appoinment-dev-AppointmentLambdaFunctionQualifiedArn"
              }
            },
            "AppointmentUnderscorepeLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "AppointmentUnderscorepeLambdaVersionvRNSxSKVv5aEQsP84xNm7ZrWIKIBrppLxszX5zNq9Io"
              },
              "Export": {
                "Name": "sls-appoinment-dev-AppointmentUnderscorepeLambdaFunctionQualifiedArn"
              }
            },
            "AppointmentUnderscoreclLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "AppointmentUnderscoreclLambdaVersionuEfTJCqQbZyHrWORWiV2SClsV9q2smJYDNgOefa0"
              },
              "Export": {
                "Name": "sls-appoinment-dev-AppointmentUnderscoreclLambdaFunctionQualifiedArn"
              }
            },
            "DocsLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "DocsLambdaVersionhJ7rCR9rr4QGFb1JnRUiZnFs0rz8YIYcLR60Eq0gp60"
              },
              "Export": {
                "Name": "sls-appoinment-dev-DocsLambdaFunctionQualifiedArn"
              }
            },
            "HttpApiId": {
              "Description": "Id of the HTTP API",
              "Value": {
                "Ref": "HttpApi"
              },
              "Export": {
                "Name": "sls-appoinment-dev-HttpApiId"
              }
            },
            "HttpApiUrl": {
              "Description": "URL of the HTTP API",
              "Value": {
                "Fn::Join": [
                  "",
                  [
                    "https://",
                    {
                      "Ref": "HttpApi"
                    },
                    ".execute-api.",
                    {
                      "Ref": "AWS::Region"
                    },
                    ".",
                    {
                      "Ref": "AWS::URLSuffix"
                    }
                  ]
                ]
              },
              "Export": {
                "Name": "sls-appoinment-dev-HttpApiUrl"
              }
            }
          }
        },
        "vpc": {}
      },
      "plugins": [
        "serverless-offline"
      ],
      "functions": {
        "appointment": {
          "handler": "src/Interfaces/Http/appointment.router",
          "events": [
            {
              "httpApi": {
                "path": "/appointments",
                "method": "post"
              },
              "resolvedMethod": "POST",
              "resolvedPath": "/appointments"
            },
            {
              "httpApi": {
                "path": "/appointments/{insuredId}",
                "method": "get"
              },
              "resolvedMethod": "GET",
              "resolvedPath": "/appointments/{insuredId}"
            },
            {
              "sqs": {
                "arn": {
                  "Fn::GetAtt": [
                    "ConfirmationQueue",
                    "Arn"
                  ]
                },
                "batchSize": 1
              }
            }
          ],
          "name": "appoinment-dev-appointment",
          "environment": {
            "NODE_OPTIONS": "--enable-source-maps"
          },
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "AppointmentLambdaVersion5ddrka76T0EJ1UpxDE0C5eaCAQkXoNtBQQmosIi9Rs"
        },
        "appointment_pe": {
          "handler": "src/Interfaces/Workers/appointment_pe.handler",
          "events": [
            {
              "sqs": {
                "arn": {
                  "Fn::GetAtt": [
                    "SqsPE",
                    "Arn"
                  ]
                },
                "batchSize": 1,
                "maximumBatchingWindow": 0
              }
            }
          ],
          "name": "appoinment-dev-appointment_pe",
          "environment": {
            "NODE_OPTIONS": "--enable-source-maps"
          },
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "AppointmentUnderscorepeLambdaVersionvRNSxSKVv5aEQsP84xNm7ZrWIKIBrppLxszX5zNq9Io"
        },
        "appointment_cl": {
          "handler": "src/Interfaces/Workers/appointment_cl.handler",
          "events": [
            {
              "sqs": {
                "arn": {
                  "Fn::GetAtt": [
                    "SqsCL",
                    "Arn"
                  ]
                },
                "batchSize": 1,
                "maximumBatchingWindow": 0
              }
            }
          ],
          "name": "appoinment-dev-appointment_cl",
          "environment": {
            "NODE_OPTIONS": "--enable-source-maps"
          },
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "AppointmentUnderscoreclLambdaVersionuEfTJCqQbZyHrWORWiV2SClsV9q2smJYDNgOefa0"
        },
        "docs": {
          "handler": "src/Interfaces/Http/docs.handler",
          "events": [
            {
              "httpApi": {
                "path": "/docs",
                "method": "get"
              },
              "resolvedMethod": "GET",
              "resolvedPath": "/docs"
            }
          ],
          "name": "appoinment-dev-docs",
          "environment": {
            "NODE_OPTIONS": "--enable-source-maps"
          },
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "DocsLambdaVersionhJ7rCR9rr4QGFb1JnRUiZnFs0rz8YIYcLR60Eq0gp60"
        }
      },
      "resources": {
        "Resources": {
          "AppointmentsTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "AppointmentsTable",
              "BillingMode": "PAY_PER_REQUEST",
              "AttributeDefinitions": [
                {
                  "AttributeName": "appointmentId",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "insuredId",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "appointmentId",
                  "KeyType": "HASH"
                }
              ],
              "GlobalSecondaryIndexes": [
                {
                  "IndexName": "InsuredGSI",
                  "KeySchema": [
                    {
                      "AttributeName": "insuredId",
                      "KeyType": "HASH"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                }
              ]
            }
          },
          "AppointmentTopic": {
            "Type": "AWS::SNS::Topic",
            "Properties": {
              "TopicName": "appointment-topic"
            }
          },
          "SqsPE": {
            "Type": "AWS::SQS::Queue",
            "Properties": {
              "QueueName": "SQS_PE"
            }
          },
          "SqsCL": {
            "Type": "AWS::SQS::Queue",
            "Properties": {
              "QueueName": "SQS_CL"
            }
          },
          "SnsSubPE": {
            "Type": "AWS::SNS::Subscription",
            "Properties": {
              "TopicArn": {
                "Ref": "AppointmentTopic"
              },
              "Protocol": "sqs",
              "Endpoint": {
                "Fn::GetAtt": [
                  "SqsPE",
                  "Arn"
                ]
              },
              "FilterPolicy": {
                "countryISO": [
                  "PE"
                ]
              }
            }
          },
          "SnsSubCL": {
            "Type": "AWS::SNS::Subscription",
            "Properties": {
              "TopicArn": {
                "Ref": "AppointmentTopic"
              },
              "Protocol": "sqs",
              "Endpoint": {
                "Fn::GetAtt": [
                  "SqsCL",
                  "Arn"
                ]
              },
              "FilterPolicy": {
                "countryISO": [
                  "CL"
                ]
              }
            }
          },
          "SqsPEPolicy": {
            "Type": "AWS::SQS::QueuePolicy",
            "Properties": {
              "Queues": [
                {
                  "Ref": "SqsPE"
                }
              ],
              "PolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": "sns.amazonaws.com"
                    },
                    "Action": "SQS:SendMessage",
                    "Resource": {
                      "Fn::GetAtt": [
                        "SqsPE",
                        "Arn"
                      ]
                    },
                    "Condition": {
                      "ArnEquals": {
                        "aws:SourceArn": {
                          "Ref": "AppointmentTopic"
                        }
                      }
                    }
                  }
                ]
              }
            }
          },
          "SqsCLPolicy": {
            "Type": "AWS::SQS::QueuePolicy",
            "Properties": {
              "Queues": [
                {
                  "Ref": "SqsCL"
                }
              ],
              "PolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": "sns.amazonaws.com"
                    },
                    "Action": "SQS:SendMessage",
                    "Resource": {
                      "Fn::GetAtt": [
                        "SqsCL",
                        "Arn"
                      ]
                    },
                    "Condition": {
                      "ArnEquals": {
                        "aws:SourceArn": {
                          "Ref": "AppointmentTopic"
                        }
                      }
                    }
                  }
                ]
              }
            }
          },
          "ConfirmationQueue": {
            "Type": "AWS::SQS::Queue",
            "Properties": {
              "QueueName": "SQS_CONFIRMATION"
            }
          },
          "AppointmentConfirmedRule": {
            "Type": "AWS::Events::Rule",
            "Properties": {
              "Name": "appointment-confirmed-rule",
              "EventBusName": "default",
              "EventPattern": {
                "source": [
                  "rimac.appointment"
                ],
                "detail-type": [
                  "AppointmentConfirmed"
                ]
              },
              "Targets": [
                {
                  "Arn": {
                    "Fn::GetAtt": [
                      "ConfirmationQueue",
                      "Arn"
                    ]
                  },
                  "Id": "ConfirmationTarget"
                }
              ]
            }
          },
          "ConfirmationQueuePolicy": {
            "Type": "AWS::SQS::QueuePolicy",
            "Properties": {
              "Queues": [
                {
                  "Ref": "ConfirmationQueue"
                }
              ],
              "PolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": "events.amazonaws.com"
                    },
                    "Action": "SQS:SendMessage",
                    "Resource": {
                      "Fn::GetAtt": [
                        "ConfirmationQueue",
                        "Arn"
                      ]
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {}
      }
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs20.x",
      "region": "us-east-1",
      "httpApi": {
        "cors": true
      },
      "environment": {
        "DDB_TABLE": "AppointmentsTable",
        "APPOINTMENT_TOPIC_ARN": {
          "Ref": "AppointmentTopic"
        },
        "EVENT_BUS_NAME": "default",
        "PE_DB_HOST": "dbappointment.c2jccqskykox.us-east-1.rds.amazonaws.com",
        "PE_DB_PORT": "3306",
        "PE_DB_USER": "admin",
        "PE_DB_PASS": "Softtek#2023",
        "PE_DB_NAME": "app_pe",
        "CL_DB_HOST": "dbappointment.c2jccqskykox.us-east-1.rds.amazonaws.com",
        "CL_DB_PORT": "3306",
        "CL_DB_USER": "admin",
        "CL_DB_PASS": "Softtek#2023",
        "CL_DB_NAME": "app_cl"
      },
      "iam": {
        "role": {
          "statements": [
            {
              "Effect": "Allow",
              "Action": [
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:GetItem",
                "dynamodb:Query"
              ],
              "Resource": [
                "arn:aws:dynamodb:us-east-1:157051741410:table/AppointmentsTable",
                "arn:aws:dynamodb:us-east-1:157051741410:table/AppointmentsTable/index/InsuredGSI"
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "sns:Publish"
              ],
              "Resource": {
                "Ref": "AppointmentTopic"
              }
            },
            {
              "Effect": "Allow",
              "Action": [
                "events:PutEvents"
              ],
              "Resource": "*"
            }
          ]
        }
      },
      "stage": "dev",
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "AppointmentLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/appoinment-dev-appointment"
            }
          },
          "AppointmentUnderscorepeLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/appoinment-dev-appointment_pe"
            }
          },
          "AppointmentUnderscoreclLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/appoinment-dev-appointment_cl"
            }
          },
          "DocsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/appoinment-dev-docs"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "appoinment",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:TagResource"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/appoinment-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/appoinment-dev*:*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "dynamodb:PutItem",
                          "dynamodb:UpdateItem",
                          "dynamodb:GetItem",
                          "dynamodb:Query"
                        ],
                        "Resource": [
                          "arn:aws:dynamodb:us-east-1:157051741410:table/AppointmentsTable",
                          "arn:aws:dynamodb:us-east-1:157051741410:table/AppointmentsTable/index/InsuredGSI"
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "sns:Publish"
                        ],
                        "Resource": {
                          "Ref": "AppointmentTopic"
                        }
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "events:PutEvents"
                        ],
                        "Resource": "*"
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "sqs:ReceiveMessage",
                          "sqs:DeleteMessage",
                          "sqs:GetQueueAttributes"
                        ],
                        "Resource": [
                          {
                            "Fn::GetAtt": [
                              "ConfirmationQueue",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::GetAtt": [
                              "SqsPE",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::GetAtt": [
                              "SqsCL",
                              "Arn"
                            ]
                          }
                        ]
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "appoinment",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "AppointmentLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-55023442-a1fe",
                "S3Key": "serverless/appoinment/dev/1757107576965-2025-09-05T21:26:16.965Z/appoinment.zip"
              },
              "Handler": "src/Interfaces/Http/appointment.router",
              "Runtime": "nodejs20.x",
              "FunctionName": "appoinment-dev-appointment",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DDB_TABLE": "AppointmentsTable",
                  "APPOINTMENT_TOPIC_ARN": {
                    "Ref": "AppointmentTopic"
                  },
                  "EVENT_BUS_NAME": "default",
                  "PE_DB_HOST": "dbappointment.c2jccqskykox.us-east-1.rds.amazonaws.com",
                  "PE_DB_PORT": "3306",
                  "PE_DB_USER": "admin",
                  "PE_DB_PASS": "Softtek#2023",
                  "PE_DB_NAME": "app_pe",
                  "CL_DB_HOST": "dbappointment.c2jccqskykox.us-east-1.rds.amazonaws.com",
                  "CL_DB_PORT": "3306",
                  "CL_DB_USER": "admin",
                  "CL_DB_PASS": "Softtek#2023",
                  "CL_DB_NAME": "app_cl",
                  "NODE_OPTIONS": "--enable-source-maps"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "AppointmentLogGroup"
            ]
          },
          "AppointmentUnderscorepeLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-55023442-a1fe",
                "S3Key": "serverless/appoinment/dev/1757107576965-2025-09-05T21:26:16.965Z/appoinment.zip"
              },
              "Handler": "src/Interfaces/Workers/appointment_pe.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "appoinment-dev-appointment_pe",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DDB_TABLE": "AppointmentsTable",
                  "APPOINTMENT_TOPIC_ARN": {
                    "Ref": "AppointmentTopic"
                  },
                  "EVENT_BUS_NAME": "default",
                  "PE_DB_HOST": "dbappointment.c2jccqskykox.us-east-1.rds.amazonaws.com",
                  "PE_DB_PORT": "3306",
                  "PE_DB_USER": "admin",
                  "PE_DB_PASS": "Softtek#2023",
                  "PE_DB_NAME": "app_pe",
                  "CL_DB_HOST": "dbappointment.c2jccqskykox.us-east-1.rds.amazonaws.com",
                  "CL_DB_PORT": "3306",
                  "CL_DB_USER": "admin",
                  "CL_DB_PASS": "Softtek#2023",
                  "CL_DB_NAME": "app_cl",
                  "NODE_OPTIONS": "--enable-source-maps"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "AppointmentUnderscorepeLogGroup"
            ]
          },
          "AppointmentUnderscoreclLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-55023442-a1fe",
                "S3Key": "serverless/appoinment/dev/1757107576965-2025-09-05T21:26:16.965Z/appoinment.zip"
              },
              "Handler": "src/Interfaces/Workers/appointment_cl.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "appoinment-dev-appointment_cl",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DDB_TABLE": "AppointmentsTable",
                  "APPOINTMENT_TOPIC_ARN": {
                    "Ref": "AppointmentTopic"
                  },
                  "EVENT_BUS_NAME": "default",
                  "PE_DB_HOST": "dbappointment.c2jccqskykox.us-east-1.rds.amazonaws.com",
                  "PE_DB_PORT": "3306",
                  "PE_DB_USER": "admin",
                  "PE_DB_PASS": "Softtek#2023",
                  "PE_DB_NAME": "app_pe",
                  "CL_DB_HOST": "dbappointment.c2jccqskykox.us-east-1.rds.amazonaws.com",
                  "CL_DB_PORT": "3306",
                  "CL_DB_USER": "admin",
                  "CL_DB_PASS": "Softtek#2023",
                  "CL_DB_NAME": "app_cl",
                  "NODE_OPTIONS": "--enable-source-maps"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "AppointmentUnderscoreclLogGroup"
            ]
          },
          "DocsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-55023442-a1fe",
                "S3Key": "serverless/appoinment/dev/1757107576965-2025-09-05T21:26:16.965Z/appoinment.zip"
              },
              "Handler": "src/Interfaces/Http/docs.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "appoinment-dev-docs",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DDB_TABLE": "AppointmentsTable",
                  "APPOINTMENT_TOPIC_ARN": {
                    "Ref": "AppointmentTopic"
                  },
                  "EVENT_BUS_NAME": "default",
                  "PE_DB_HOST": "dbappointment.c2jccqskykox.us-east-1.rds.amazonaws.com",
                  "PE_DB_PORT": "3306",
                  "PE_DB_USER": "admin",
                  "PE_DB_PASS": "Softtek#2023",
                  "PE_DB_NAME": "app_pe",
                  "CL_DB_HOST": "dbappointment.c2jccqskykox.us-east-1.rds.amazonaws.com",
                  "CL_DB_PORT": "3306",
                  "CL_DB_USER": "admin",
                  "CL_DB_PASS": "Softtek#2023",
                  "CL_DB_NAME": "app_cl",
                  "NODE_OPTIONS": "--enable-source-maps"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DocsLogGroup"
            ]
          },
          "AppointmentLambdaVersion5ddrka76T0EJ1UpxDE0C5eaCAQkXoNtBQQmosIi9Rs": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "AppointmentLambdaFunction"
              },
              "CodeSha256": "UNjfQWT0BwoWO0FMOsygaOKIt6n+7G/ehxnryA0PyRc="
            }
          },
          "AppointmentUnderscorepeLambdaVersionvRNSxSKVv5aEQsP84xNm7ZrWIKIBrppLxszX5zNq9Io": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "AppointmentUnderscorepeLambdaFunction"
              },
              "CodeSha256": "UNjfQWT0BwoWO0FMOsygaOKIt6n+7G/ehxnryA0PyRc="
            }
          },
          "AppointmentUnderscoreclLambdaVersionuEfTJCqQbZyHrWORWiV2SClsV9q2smJYDNgOefa0": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "AppointmentUnderscoreclLambdaFunction"
              },
              "CodeSha256": "UNjfQWT0BwoWO0FMOsygaOKIt6n+7G/ehxnryA0PyRc="
            }
          },
          "DocsLambdaVersionhJ7rCR9rr4QGFb1JnRUiZnFs0rz8YIYcLR60Eq0gp60": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DocsLambdaFunction"
              },
              "CodeSha256": "UNjfQWT0BwoWO0FMOsygaOKIt6n+7G/ehxnryA0PyRc="
            }
          },
          "AppointmentEventSourceMappingSQSConfirmationQueue": {
            "Type": "AWS::Lambda::EventSourceMapping",
            "DependsOn": [
              "IamRoleLambdaExecution"
            ],
            "Properties": {
              "BatchSize": 1,
              "EventSourceArn": {
                "Fn::GetAtt": [
                  "ConfirmationQueue",
                  "Arn"
                ]
              },
              "FunctionName": {
                "Fn::GetAtt": [
                  "AppointmentLambdaFunction",
                  "Arn"
                ]
              },
              "Enabled": true
            }
          },
          "AppointmentUnderscorepeEventSourceMappingSQSSqsPE": {
            "Type": "AWS::Lambda::EventSourceMapping",
            "DependsOn": [
              "IamRoleLambdaExecution"
            ],
            "Properties": {
              "BatchSize": 1,
              "MaximumBatchingWindowInSeconds": 0,
              "EventSourceArn": {
                "Fn::GetAtt": [
                  "SqsPE",
                  "Arn"
                ]
              },
              "FunctionName": {
                "Fn::GetAtt": [
                  "AppointmentUnderscorepeLambdaFunction",
                  "Arn"
                ]
              },
              "Enabled": true
            }
          },
          "AppointmentUnderscoreclEventSourceMappingSQSSqsCL": {
            "Type": "AWS::Lambda::EventSourceMapping",
            "DependsOn": [
              "IamRoleLambdaExecution"
            ],
            "Properties": {
              "BatchSize": 1,
              "MaximumBatchingWindowInSeconds": 0,
              "EventSourceArn": {
                "Fn::GetAtt": [
                  "SqsCL",
                  "Arn"
                ]
              },
              "FunctionName": {
                "Fn::GetAtt": [
                  "AppointmentUnderscoreclLambdaFunction",
                  "Arn"
                ]
              },
              "Enabled": true
            }
          },
          "HttpApi": {
            "Type": "AWS::ApiGatewayV2::Api",
            "Properties": {
              "Name": "dev-appoinment",
              "ProtocolType": "HTTP",
              "CorsConfiguration": {
                "AllowCredentials": "<REDACTED>",
                "AllowHeaders": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "AllowMethods": [
                  "OPTIONS",
                  "POST",
                  "GET"
                ],
                "AllowOrigins": [
                  "*"
                ]
              }
            }
          },
          "HttpApiStage": {
            "Type": "AWS::ApiGatewayV2::Stage",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "StageName": "$default",
              "AutoDeploy": true,
              "DefaultRouteSettings": {
                "DetailedMetricsEnabled": false
              }
            }
          },
          "AppointmentLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "AppointmentLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationAppointment": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "AppointmentLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostAppointments": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /appointments",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationAppointment"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationAppointment"
          },
          "HttpApiRouteGetAppointmentsInsuredidVar": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /appointments/{insuredId}",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationAppointment"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationAppointment"
          },
          "DocsLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DocsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationDocs": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "DocsLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetDocs": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /docs",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationDocs"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationDocs"
          },
          "AppointmentsTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "AppointmentsTable",
              "BillingMode": "PAY_PER_REQUEST",
              "AttributeDefinitions": [
                {
                  "AttributeName": "appointmentId",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "insuredId",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "appointmentId",
                  "KeyType": "HASH"
                }
              ],
              "GlobalSecondaryIndexes": [
                {
                  "IndexName": "InsuredGSI",
                  "KeySchema": [
                    {
                      "AttributeName": "insuredId",
                      "KeyType": "HASH"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                }
              ]
            }
          },
          "AppointmentTopic": {
            "Type": "AWS::SNS::Topic",
            "Properties": {
              "TopicName": "appointment-topic"
            }
          },
          "SqsPE": {
            "Type": "AWS::SQS::Queue",
            "Properties": {
              "QueueName": "SQS_PE"
            }
          },
          "SqsCL": {
            "Type": "AWS::SQS::Queue",
            "Properties": {
              "QueueName": "SQS_CL"
            }
          },
          "SnsSubPE": {
            "Type": "AWS::SNS::Subscription",
            "Properties": {
              "TopicArn": {
                "Ref": "AppointmentTopic"
              },
              "Protocol": "sqs",
              "Endpoint": {
                "Fn::GetAtt": [
                  "SqsPE",
                  "Arn"
                ]
              },
              "FilterPolicy": {
                "countryISO": [
                  "PE"
                ]
              }
            }
          },
          "SnsSubCL": {
            "Type": "AWS::SNS::Subscription",
            "Properties": {
              "TopicArn": {
                "Ref": "AppointmentTopic"
              },
              "Protocol": "sqs",
              "Endpoint": {
                "Fn::GetAtt": [
                  "SqsCL",
                  "Arn"
                ]
              },
              "FilterPolicy": {
                "countryISO": [
                  "CL"
                ]
              }
            }
          },
          "SqsPEPolicy": {
            "Type": "AWS::SQS::QueuePolicy",
            "Properties": {
              "Queues": [
                {
                  "Ref": "SqsPE"
                }
              ],
              "PolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": "sns.amazonaws.com"
                    },
                    "Action": "SQS:SendMessage",
                    "Resource": {
                      "Fn::GetAtt": [
                        "SqsPE",
                        "Arn"
                      ]
                    },
                    "Condition": {
                      "ArnEquals": {
                        "aws:SourceArn": {
                          "Ref": "AppointmentTopic"
                        }
                      }
                    }
                  }
                ]
              }
            }
          },
          "SqsCLPolicy": {
            "Type": "AWS::SQS::QueuePolicy",
            "Properties": {
              "Queues": [
                {
                  "Ref": "SqsCL"
                }
              ],
              "PolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": "sns.amazonaws.com"
                    },
                    "Action": "SQS:SendMessage",
                    "Resource": {
                      "Fn::GetAtt": [
                        "SqsCL",
                        "Arn"
                      ]
                    },
                    "Condition": {
                      "ArnEquals": {
                        "aws:SourceArn": {
                          "Ref": "AppointmentTopic"
                        }
                      }
                    }
                  }
                ]
              }
            }
          },
          "ConfirmationQueue": {
            "Type": "AWS::SQS::Queue",
            "Properties": {
              "QueueName": "SQS_CONFIRMATION"
            }
          },
          "AppointmentConfirmedRule": {
            "Type": "AWS::Events::Rule",
            "Properties": {
              "Name": "appointment-confirmed-rule",
              "EventBusName": "default",
              "EventPattern": {
                "source": [
                  "rimac.appointment"
                ],
                "detail-type": [
                  "AppointmentConfirmed"
                ]
              },
              "Targets": [
                {
                  "Arn": {
                    "Fn::GetAtt": [
                      "ConfirmationQueue",
                      "Arn"
                    ]
                  },
                  "Id": "ConfirmationTarget"
                }
              ]
            }
          },
          "ConfirmationQueuePolicy": {
            "Type": "AWS::SQS::QueuePolicy",
            "Properties": {
              "Queues": [
                {
                  "Ref": "ConfirmationQueue"
                }
              ],
              "PolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": "events.amazonaws.com"
                    },
                    "Action": "SQS:SendMessage",
                    "Resource": {
                      "Fn::GetAtt": [
                        "ConfirmationQueue",
                        "Arn"
                      ]
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": "serverless-framework-deployments-us-east-1-55023442-a1fe",
            "Export": {
              "Name": "sls-appoinment-dev-ServerlessDeploymentBucketName"
            }
          },
          "AppointmentLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "AppointmentLambdaVersion5ddrka76T0EJ1UpxDE0C5eaCAQkXoNtBQQmosIi9Rs"
            },
            "Export": {
              "Name": "sls-appoinment-dev-AppointmentLambdaFunctionQualifiedArn"
            }
          },
          "AppointmentUnderscorepeLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "AppointmentUnderscorepeLambdaVersionvRNSxSKVv5aEQsP84xNm7ZrWIKIBrppLxszX5zNq9Io"
            },
            "Export": {
              "Name": "sls-appoinment-dev-AppointmentUnderscorepeLambdaFunctionQualifiedArn"
            }
          },
          "AppointmentUnderscoreclLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "AppointmentUnderscoreclLambdaVersionuEfTJCqQbZyHrWORWiV2SClsV9q2smJYDNgOefa0"
            },
            "Export": {
              "Name": "sls-appoinment-dev-AppointmentUnderscoreclLambdaFunctionQualifiedArn"
            }
          },
          "DocsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DocsLambdaVersionhJ7rCR9rr4QGFb1JnRUiZnFs0rz8YIYcLR60Eq0gp60"
            },
            "Export": {
              "Name": "sls-appoinment-dev-DocsLambdaFunctionQualifiedArn"
            }
          },
          "HttpApiId": {
            "Description": "Id of the HTTP API",
            "Value": {
              "Ref": "HttpApi"
            },
            "Export": {
              "Name": "sls-appoinment-dev-HttpApiId"
            }
          },
          "HttpApiUrl": {
            "Description": "URL of the HTTP API",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "HttpApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  }
                ]
              ]
            },
            "Export": {
              "Name": "sls-appoinment-dev-HttpApiUrl"
            }
          }
        }
      },
      "vpc": {}
    },
    "dashboard": {
      "isEnabledForService": false,
      "requiredAuthentication": false,
      "orgFeaturesInUse": null,
      "orgObservabilityIntegrations": null,
      "serviceAppId": null,
      "serviceProvider": null,
      "instanceParameters": null
    },
    "serviceRawFile": "org: myorgluis\nservice: appoinment\n\nprovider:\n  name: aws\n  runtime: nodejs20.x\n  region: us-east-1\n  httpApi:\n    cors: true\n  environment:\n    DDB_TABLE: AppointmentsTable\n    APPOINTMENT_TOPIC_ARN: !Ref AppointmentTopic  \n    EVENT_BUS_NAME: default\n    # --- Conexión a MySQL para Perú\n    PE_DB_HOST: dbappointment.c2jccqskykox.us-east-1.rds.amazonaws.com\n    PE_DB_PORT: \"3306\"\n    PE_DB_USER: admin\n    PE_DB_PASS: \"Softtek#2023\"\n    PE_DB_NAME: app_pe\n\n    # --- Conexión a MySQL para Chile ---\n    CL_DB_HOST: dbappointment.c2jccqskykox.us-east-1.rds.amazonaws.com\n    CL_DB_PORT: \"3306\"\n    CL_DB_USER: admin\n    CL_DB_PASS: \"Softtek#2023\"\n    CL_DB_NAME: app_cl\n  iam:\n    role:\n      statements:\n        # DynamoDB\n        - Effect: Allow\n          Action:\n            - dynamodb:PutItem\n            - dynamodb:UpdateItem\n            - dynamodb:GetItem\n            - dynamodb:Query\n          Resource:\n            - arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/AppointmentsTable\n            - arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/AppointmentsTable/index/InsuredGSI\n        # SNS\n        - Effect: Allow\n          Action: sns:Publish\n          Resource: !Ref AppointmentTopic\n        \n        # EventBridge\n        - Effect: Allow\n          Action: events:PutEvents\n          Resource: \"*\"\n\nplugins:\n  - serverless-offline\n\nfunctions:\n  appointment:\n    handler: src/Interfaces/Http/appointment.router\n    events:\n      - httpApi:\n          path: /appointments\n          method: post\n      - httpApi:\n          path: /appointments/{insuredId}\n          method: get\n      - sqs:\n          arn: { Fn::GetAtt: [ ConfirmationQueue, Arn ] }\n          batchSize: 1\n  appointment_pe:\n    handler: src/Interfaces/Workers/appointment_pe.handler\n    events:\n      - sqs:\n          arn: { Fn::GetAtt: [ SqsPE, Arn ] }\n          batchSize: 1\n          maximumBatchingWindow: 0\n  appointment_cl:\n    handler: src/Interfaces/Workers/appointment_cl.handler\n    events:\n      - sqs:\n          arn: { Fn::GetAtt: [ SqsCL, Arn ] }\n          batchSize: 1\n          maximumBatchingWindow: 0\n  docs:\n    handler: src/Interfaces/Http/docs.handler\n    events:\n      - httpApi:\n          path: /docs\n          method: get  \n\nresources:\n  Resources:\n    # DynamoDB\n    AppointmentsTable:\n      Type: AWS::DynamoDB::Table\n      Properties:\n        TableName: AppointmentsTable\n        BillingMode: PAY_PER_REQUEST\n        AttributeDefinitions:\n          - AttributeName: appointmentId\n            AttributeType: S\n          - AttributeName: insuredId\n            AttributeType: S\n        KeySchema:\n          - AttributeName: appointmentId\n            KeyType: HASH\n        GlobalSecondaryIndexes:\n          - IndexName: InsuredGSI\n            KeySchema:\n              - AttributeName: insuredId\n                KeyType: HASH\n            Projection:\n              ProjectionType: ALL\n\n    # SNS Topic\n    AppointmentTopic:\n      Type: AWS::SNS::Topic\n      Properties:\n        TopicName: appointment-topic\n\n    # --- SQS por país ---\n    SqsPE:\n      Type: AWS::SQS::Queue\n      Properties:\n        QueueName: SQS_PE\n\n    SqsCL:\n      Type: AWS::SQS::Queue\n      Properties:\n        QueueName: SQS_CL\n\n    # --- Suscripciones SNS -> SQS con filtro por countryISO ---\n    SnsSubPE:\n      Type: AWS::SNS::Subscription\n      Properties:\n        TopicArn: !Ref AppointmentTopic\n        Protocol: sqs\n        Endpoint: !GetAtt SqsPE.Arn\n        FilterPolicy:\n          countryISO: [ \"PE\" ]\n\n    SnsSubCL:\n      Type: AWS::SNS::Subscription\n      Properties:\n        TopicArn: !Ref AppointmentTopic\n        Protocol: sqs\n        Endpoint: !GetAtt SqsCL.Arn\n        FilterPolicy:\n          countryISO: [ \"CL\" ]\n\n    # --- Policies para permitir a SNS enviar a SQS ---\n    SqsPEPolicy:\n      Type: AWS::SQS::QueuePolicy\n      Properties:\n        Queues: [ !Ref SqsPE ]\n        PolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal: { Service: sns.amazonaws.com }\n              Action: SQS:SendMessage\n              Resource: !GetAtt SqsPE.Arn\n              Condition:\n                ArnEquals:\n                  aws:SourceArn: !Ref AppointmentTopic\n\n    SqsCLPolicy:\n      Type: AWS::SQS::QueuePolicy\n      Properties:\n        Queues: [ !Ref SqsCL ]\n        PolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal: { Service: sns.amazonaws.com }\n              Action: SQS:SendMessage\n              Resource: !GetAtt SqsCL.Arn\n              Condition:\n                ArnEquals:\n                  aws:SourceArn: !Ref AppointmentTopic\n              \n    ConfirmationQueue:\n      Type: AWS::SQS::Queue\n      Properties: { QueueName: SQS_CONFIRMATION }\n\n    AppointmentConfirmedRule:\n      Type: AWS::Events::Rule\n      Properties:\n        Name: appointment-confirmed-rule\n        EventBusName: default\n        EventPattern:\n          source: [ \"rimac.appointment\" ]\n          detail-type: [ \"AppointmentConfirmed\" ]\n        Targets:\n          - Arn: !GetAtt ConfirmationQueue.Arn\n            Id: ConfirmationTarget\n\n    ConfirmationQueuePolicy:\n      Type: AWS::SQS::QueuePolicy\n      Properties:\n        Queues: [ !Ref ConfirmationQueue ]\n        PolicyDocument:\n          Version: '2012-10-17'\n          Statement:\n            - Effect: Allow\n              Principal: { Service: events.amazonaws.com }\n              Action: SQS:SendMessage\n              Resource: !GetAtt ConfirmationQueue.Arn",
    "command": [
      "deploy"
    ],
    "options": {},
    "orgId": "968b5760-5632-436a-9166-d8423d659e57",
    "orgName": "myorgluis",
    "userId": "R7zDNZQ8tPP4Dm1H65",
    "userName": "myorgluis",
    "serviceProviderAwsAccountId": "157051741410",
    "serviceProviderAwsCfStackName": "appoinment-dev",
    "serviceProviderAwsCfStackId": "arn:aws:cloudformation:us-east-1:157051741410:stack/appoinment-dev/9c757440-8a08-11f0-8714-0affe917e6ad",
    "serviceProviderAwsCfStackCreated": "2025-09-05T03:30:03.935Z",
    "serviceProviderAwsCfStackUpdated": "2025-09-05T17:24:59.012Z",
    "serviceProviderAwsCfStackStatus": "UPDATE_COMPLETE",
    "serviceProviderAwsCfStackOutputs": [
      {
        "OutputKey": "AppointmentLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:157051741410:function:appoinment-dev-appointment:9",
        "Description": "Current Lambda function version",
        "ExportName": "sls-appoinment-dev-AppointmentLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "AppointmentUnderscoreclLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:157051741410:function:appoinment-dev-appointment_cl:6",
        "Description": "Current Lambda function version",
        "ExportName": "sls-appoinment-dev-AppointmentUnderscoreclLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "DocsLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:157051741410:function:appoinment-dev-docs:3",
        "Description": "Current Lambda function version",
        "ExportName": "sls-appoinment-dev-DocsLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "AppointmentUnderscorepeLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:157051741410:function:appoinment-dev-appointment_pe:6",
        "Description": "Current Lambda function version",
        "ExportName": "sls-appoinment-dev-AppointmentUnderscorepeLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "HttpApiId",
        "OutputValue": "yj6hb7xlw1",
        "Description": "Id of the HTTP API",
        "ExportName": "sls-appoinment-dev-HttpApiId"
      },
      {
        "OutputKey": "ServerlessDeploymentBucketName",
        "OutputValue": "serverless-framework-deployments-us-east-1-55023442-a1fe",
        "ExportName": "sls-appoinment-dev-ServerlessDeploymentBucketName"
      },
      {
        "OutputKey": "HttpApiUrl",
        "OutputValue": "https://yj6hb7xlw1.execute-api.us-east-1.amazonaws.com",
        "Description": "URL of the HTTP API",
        "ExportName": "sls-appoinment-dev-HttpApiUrl"
      }
    ],
    "compiledCloudFormationTemplate": {
      "AWSTemplateFormatVersion": "2010-09-09",
      "Description": "The AWS CloudFormation template for this Serverless application",
      "Resources": {
        "AppointmentLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/appoinment-dev-appointment"
          }
        },
        "AppointmentUnderscorepeLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/appoinment-dev-appointment_pe"
          }
        },
        "AppointmentUnderscoreclLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/appoinment-dev-appointment_cl"
          }
        },
        "DocsLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/appoinment-dev-docs"
          }
        },
        "IamRoleLambdaExecution": {
          "Type": "AWS::IAM::Role",
          "Properties": {
            "AssumeRolePolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": [
                      "lambda.amazonaws.com"
                    ]
                  },
                  "Action": [
                    "sts:AssumeRole"
                  ]
                }
              ]
            },
            "Policies": [
              {
                "PolicyName": {
                  "Fn::Join": [
                    "-",
                    [
                      "appoinment",
                      "dev",
                      "lambda"
                    ]
                  ]
                },
                "PolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": [
                        "logs:CreateLogStream",
                        "logs:CreateLogGroup",
                        "logs:TagResource"
                      ],
                      "Resource": [
                        {
                          "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/appoinment-dev*:*"
                        }
                      ]
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "logs:PutLogEvents"
                      ],
                      "Resource": [
                        {
                          "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/appoinment-dev*:*:*"
                        }
                      ]
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "dynamodb:PutItem",
                        "dynamodb:UpdateItem",
                        "dynamodb:GetItem",
                        "dynamodb:Query"
                      ],
                      "Resource": [
                        "arn:aws:dynamodb:us-east-1:157051741410:table/AppointmentsTable",
                        "arn:aws:dynamodb:us-east-1:157051741410:table/AppointmentsTable/index/InsuredGSI"
                      ]
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "sns:Publish"
                      ],
                      "Resource": {
                        "Ref": "AppointmentTopic"
                      }
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "events:PutEvents"
                      ],
                      "Resource": "*"
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "sqs:ReceiveMessage",
                        "sqs:DeleteMessage",
                        "sqs:GetQueueAttributes"
                      ],
                      "Resource": [
                        {
                          "Fn::GetAtt": [
                            "ConfirmationQueue",
                            "Arn"
                          ]
                        },
                        {
                          "Fn::GetAtt": [
                            "SqsPE",
                            "Arn"
                          ]
                        },
                        {
                          "Fn::GetAtt": [
                            "SqsCL",
                            "Arn"
                          ]
                        }
                      ]
                    }
                  ]
                }
              }
            ],
            "Path": "/",
            "RoleName": {
              "Fn::Join": [
                "-",
                [
                  "appoinment",
                  "dev",
                  {
                    "Ref": "AWS::Region"
                  },
                  "lambdaRole"
                ]
              ]
            }
          }
        },
        "AppointmentLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-1-55023442-a1fe",
              "S3Key": "serverless/appoinment/dev/1757107576965-2025-09-05T21:26:16.965Z/appoinment.zip"
            },
            "Handler": "src/Interfaces/Http/appointment.router",
            "Runtime": "nodejs20.x",
            "FunctionName": "appoinment-dev-appointment",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "DDB_TABLE": "AppointmentsTable",
                "APPOINTMENT_TOPIC_ARN": {
                  "Ref": "AppointmentTopic"
                },
                "EVENT_BUS_NAME": "default",
                "PE_DB_HOST": "dbappointment.c2jccqskykox.us-east-1.rds.amazonaws.com",
                "PE_DB_PORT": "3306",
                "PE_DB_USER": "admin",
                "PE_DB_PASS": "Softtek#2023",
                "PE_DB_NAME": "app_pe",
                "CL_DB_HOST": "dbappointment.c2jccqskykox.us-east-1.rds.amazonaws.com",
                "CL_DB_PORT": "3306",
                "CL_DB_USER": "admin",
                "CL_DB_PASS": "Softtek#2023",
                "CL_DB_NAME": "app_cl",
                "NODE_OPTIONS": "--enable-source-maps"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "AppointmentLogGroup"
          ]
        },
        "AppointmentUnderscorepeLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-1-55023442-a1fe",
              "S3Key": "serverless/appoinment/dev/1757107576965-2025-09-05T21:26:16.965Z/appoinment.zip"
            },
            "Handler": "src/Interfaces/Workers/appointment_pe.handler",
            "Runtime": "nodejs20.x",
            "FunctionName": "appoinment-dev-appointment_pe",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "DDB_TABLE": "AppointmentsTable",
                "APPOINTMENT_TOPIC_ARN": {
                  "Ref": "AppointmentTopic"
                },
                "EVENT_BUS_NAME": "default",
                "PE_DB_HOST": "dbappointment.c2jccqskykox.us-east-1.rds.amazonaws.com",
                "PE_DB_PORT": "3306",
                "PE_DB_USER": "admin",
                "PE_DB_PASS": "Softtek#2023",
                "PE_DB_NAME": "app_pe",
                "CL_DB_HOST": "dbappointment.c2jccqskykox.us-east-1.rds.amazonaws.com",
                "CL_DB_PORT": "3306",
                "CL_DB_USER": "admin",
                "CL_DB_PASS": "Softtek#2023",
                "CL_DB_NAME": "app_cl",
                "NODE_OPTIONS": "--enable-source-maps"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "AppointmentUnderscorepeLogGroup"
          ]
        },
        "AppointmentUnderscoreclLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-1-55023442-a1fe",
              "S3Key": "serverless/appoinment/dev/1757107576965-2025-09-05T21:26:16.965Z/appoinment.zip"
            },
            "Handler": "src/Interfaces/Workers/appointment_cl.handler",
            "Runtime": "nodejs20.x",
            "FunctionName": "appoinment-dev-appointment_cl",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "DDB_TABLE": "AppointmentsTable",
                "APPOINTMENT_TOPIC_ARN": {
                  "Ref": "AppointmentTopic"
                },
                "EVENT_BUS_NAME": "default",
                "PE_DB_HOST": "dbappointment.c2jccqskykox.us-east-1.rds.amazonaws.com",
                "PE_DB_PORT": "3306",
                "PE_DB_USER": "admin",
                "PE_DB_PASS": "Softtek#2023",
                "PE_DB_NAME": "app_pe",
                "CL_DB_HOST": "dbappointment.c2jccqskykox.us-east-1.rds.amazonaws.com",
                "CL_DB_PORT": "3306",
                "CL_DB_USER": "admin",
                "CL_DB_PASS": "Softtek#2023",
                "CL_DB_NAME": "app_cl",
                "NODE_OPTIONS": "--enable-source-maps"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "AppointmentUnderscoreclLogGroup"
          ]
        },
        "DocsLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-1-55023442-a1fe",
              "S3Key": "serverless/appoinment/dev/1757107576965-2025-09-05T21:26:16.965Z/appoinment.zip"
            },
            "Handler": "src/Interfaces/Http/docs.handler",
            "Runtime": "nodejs20.x",
            "FunctionName": "appoinment-dev-docs",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "DDB_TABLE": "AppointmentsTable",
                "APPOINTMENT_TOPIC_ARN": {
                  "Ref": "AppointmentTopic"
                },
                "EVENT_BUS_NAME": "default",
                "PE_DB_HOST": "dbappointment.c2jccqskykox.us-east-1.rds.amazonaws.com",
                "PE_DB_PORT": "3306",
                "PE_DB_USER": "admin",
                "PE_DB_PASS": "Softtek#2023",
                "PE_DB_NAME": "app_pe",
                "CL_DB_HOST": "dbappointment.c2jccqskykox.us-east-1.rds.amazonaws.com",
                "CL_DB_PORT": "3306",
                "CL_DB_USER": "admin",
                "CL_DB_PASS": "Softtek#2023",
                "CL_DB_NAME": "app_cl",
                "NODE_OPTIONS": "--enable-source-maps"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "DocsLogGroup"
          ]
        },
        "AppointmentLambdaVersion5ddrka76T0EJ1UpxDE0C5eaCAQkXoNtBQQmosIi9Rs": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "AppointmentLambdaFunction"
            },
            "CodeSha256": "UNjfQWT0BwoWO0FMOsygaOKIt6n+7G/ehxnryA0PyRc="
          }
        },
        "AppointmentUnderscorepeLambdaVersionvRNSxSKVv5aEQsP84xNm7ZrWIKIBrppLxszX5zNq9Io": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "AppointmentUnderscorepeLambdaFunction"
            },
            "CodeSha256": "UNjfQWT0BwoWO0FMOsygaOKIt6n+7G/ehxnryA0PyRc="
          }
        },
        "AppointmentUnderscoreclLambdaVersionuEfTJCqQbZyHrWORWiV2SClsV9q2smJYDNgOefa0": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "AppointmentUnderscoreclLambdaFunction"
            },
            "CodeSha256": "UNjfQWT0BwoWO0FMOsygaOKIt6n+7G/ehxnryA0PyRc="
          }
        },
        "DocsLambdaVersionhJ7rCR9rr4QGFb1JnRUiZnFs0rz8YIYcLR60Eq0gp60": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "DocsLambdaFunction"
            },
            "CodeSha256": "UNjfQWT0BwoWO0FMOsygaOKIt6n+7G/ehxnryA0PyRc="
          }
        },
        "AppointmentEventSourceMappingSQSConfirmationQueue": {
          "Type": "AWS::Lambda::EventSourceMapping",
          "DependsOn": [
            "IamRoleLambdaExecution"
          ],
          "Properties": {
            "BatchSize": 1,
            "EventSourceArn": {
              "Fn::GetAtt": [
                "ConfirmationQueue",
                "Arn"
              ]
            },
            "FunctionName": {
              "Fn::GetAtt": [
                "AppointmentLambdaFunction",
                "Arn"
              ]
            },
            "Enabled": true
          }
        },
        "AppointmentUnderscorepeEventSourceMappingSQSSqsPE": {
          "Type": "AWS::Lambda::EventSourceMapping",
          "DependsOn": [
            "IamRoleLambdaExecution"
          ],
          "Properties": {
            "BatchSize": 1,
            "MaximumBatchingWindowInSeconds": 0,
            "EventSourceArn": {
              "Fn::GetAtt": [
                "SqsPE",
                "Arn"
              ]
            },
            "FunctionName": {
              "Fn::GetAtt": [
                "AppointmentUnderscorepeLambdaFunction",
                "Arn"
              ]
            },
            "Enabled": true
          }
        },
        "AppointmentUnderscoreclEventSourceMappingSQSSqsCL": {
          "Type": "AWS::Lambda::EventSourceMapping",
          "DependsOn": [
            "IamRoleLambdaExecution"
          ],
          "Properties": {
            "BatchSize": 1,
            "MaximumBatchingWindowInSeconds": 0,
            "EventSourceArn": {
              "Fn::GetAtt": [
                "SqsCL",
                "Arn"
              ]
            },
            "FunctionName": {
              "Fn::GetAtt": [
                "AppointmentUnderscoreclLambdaFunction",
                "Arn"
              ]
            },
            "Enabled": true
          }
        },
        "HttpApi": {
          "Type": "AWS::ApiGatewayV2::Api",
          "Properties": {
            "Name": "dev-appoinment",
            "ProtocolType": "HTTP",
            "CorsConfiguration": {
              "AllowHeaders": [
                "Content-Type",
                "X-Amz-Date",
                "Authorization",
                "X-Api-Key",
                "X-Amz-Security-Token",
                "X-Amz-User-Agent",
                "X-Amzn-Trace-Id"
              ],
              "AllowMethods": [
                "OPTIONS",
                "POST",
                "GET"
              ],
              "AllowOrigins": [
                "*"
              ]
            }
          }
        },
        "HttpApiStage": {
          "Type": "AWS::ApiGatewayV2::Stage",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "StageName": "$default",
            "AutoDeploy": true,
            "DefaultRouteSettings": {
              "DetailedMetricsEnabled": false
            }
          }
        },
        "AppointmentLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "AppointmentLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationAppointment": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "AppointmentLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRoutePostAppointments": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "POST /appointments",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationAppointment"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationAppointment"
        },
        "HttpApiRouteGetAppointmentsInsuredidVar": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "GET /appointments/{insuredId}",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationAppointment"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationAppointment"
        },
        "DocsLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "DocsLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationDocs": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "DocsLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRouteGetDocs": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "GET /docs",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationDocs"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationDocs"
        },
        "AppointmentsTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "AppointmentsTable",
            "BillingMode": "PAY_PER_REQUEST",
            "AttributeDefinitions": [
              {
                "AttributeName": "appointmentId",
                "AttributeType": "S"
              },
              {
                "AttributeName": "insuredId",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "appointmentId",
                "KeyType": "HASH"
              }
            ],
            "GlobalSecondaryIndexes": [
              {
                "IndexName": "InsuredGSI",
                "KeySchema": [
                  {
                    "AttributeName": "insuredId",
                    "KeyType": "HASH"
                  }
                ],
                "Projection": {
                  "ProjectionType": "ALL"
                }
              }
            ]
          }
        },
        "AppointmentTopic": {
          "Type": "AWS::SNS::Topic",
          "Properties": {
            "TopicName": "appointment-topic"
          }
        },
        "SqsPE": {
          "Type": "AWS::SQS::Queue",
          "Properties": {
            "QueueName": "SQS_PE"
          }
        },
        "SqsCL": {
          "Type": "AWS::SQS::Queue",
          "Properties": {
            "QueueName": "SQS_CL"
          }
        },
        "SnsSubPE": {
          "Type": "AWS::SNS::Subscription",
          "Properties": {
            "TopicArn": {
              "Ref": "AppointmentTopic"
            },
            "Protocol": "sqs",
            "Endpoint": {
              "Fn::GetAtt": [
                "SqsPE",
                "Arn"
              ]
            },
            "FilterPolicy": {
              "countryISO": [
                "PE"
              ]
            }
          }
        },
        "SnsSubCL": {
          "Type": "AWS::SNS::Subscription",
          "Properties": {
            "TopicArn": {
              "Ref": "AppointmentTopic"
            },
            "Protocol": "sqs",
            "Endpoint": {
              "Fn::GetAtt": [
                "SqsCL",
                "Arn"
              ]
            },
            "FilterPolicy": {
              "countryISO": [
                "CL"
              ]
            }
          }
        },
        "SqsPEPolicy": {
          "Type": "AWS::SQS::QueuePolicy",
          "Properties": {
            "Queues": [
              {
                "Ref": "SqsPE"
              }
            ],
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": "sns.amazonaws.com"
                  },
                  "Action": "SQS:SendMessage",
                  "Resource": {
                    "Fn::GetAtt": [
                      "SqsPE",
                      "Arn"
                    ]
                  },
                  "Condition": {
                    "ArnEquals": {
                      "aws:SourceArn": {
                        "Ref": "AppointmentTopic"
                      }
                    }
                  }
                }
              ]
            }
          }
        },
        "SqsCLPolicy": {
          "Type": "AWS::SQS::QueuePolicy",
          "Properties": {
            "Queues": [
              {
                "Ref": "SqsCL"
              }
            ],
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": "sns.amazonaws.com"
                  },
                  "Action": "SQS:SendMessage",
                  "Resource": {
                    "Fn::GetAtt": [
                      "SqsCL",
                      "Arn"
                    ]
                  },
                  "Condition": {
                    "ArnEquals": {
                      "aws:SourceArn": {
                        "Ref": "AppointmentTopic"
                      }
                    }
                  }
                }
              ]
            }
          }
        },
        "ConfirmationQueue": {
          "Type": "AWS::SQS::Queue",
          "Properties": {
            "QueueName": "SQS_CONFIRMATION"
          }
        },
        "AppointmentConfirmedRule": {
          "Type": "AWS::Events::Rule",
          "Properties": {
            "Name": "appointment-confirmed-rule",
            "EventBusName": "default",
            "EventPattern": {
              "source": [
                "rimac.appointment"
              ],
              "detail-type": [
                "AppointmentConfirmed"
              ]
            },
            "Targets": [
              {
                "Arn": {
                  "Fn::GetAtt": [
                    "ConfirmationQueue",
                    "Arn"
                  ]
                },
                "Id": "ConfirmationTarget"
              }
            ]
          }
        },
        "ConfirmationQueuePolicy": {
          "Type": "AWS::SQS::QueuePolicy",
          "Properties": {
            "Queues": [
              {
                "Ref": "ConfirmationQueue"
              }
            ],
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": "events.amazonaws.com"
                  },
                  "Action": "SQS:SendMessage",
                  "Resource": {
                    "Fn::GetAtt": [
                      "ConfirmationQueue",
                      "Arn"
                    ]
                  }
                }
              ]
            }
          }
        }
      },
      "Outputs": {
        "ServerlessDeploymentBucketName": {
          "Value": "serverless-framework-deployments-us-east-1-55023442-a1fe",
          "Export": {
            "Name": "sls-appoinment-dev-ServerlessDeploymentBucketName"
          }
        },
        "AppointmentLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "AppointmentLambdaVersion5ddrka76T0EJ1UpxDE0C5eaCAQkXoNtBQQmosIi9Rs"
          },
          "Export": {
            "Name": "sls-appoinment-dev-AppointmentLambdaFunctionQualifiedArn"
          }
        },
        "AppointmentUnderscorepeLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "AppointmentUnderscorepeLambdaVersionvRNSxSKVv5aEQsP84xNm7ZrWIKIBrppLxszX5zNq9Io"
          },
          "Export": {
            "Name": "sls-appoinment-dev-AppointmentUnderscorepeLambdaFunctionQualifiedArn"
          }
        },
        "AppointmentUnderscoreclLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "AppointmentUnderscoreclLambdaVersionuEfTJCqQbZyHrWORWiV2SClsV9q2smJYDNgOefa0"
          },
          "Export": {
            "Name": "sls-appoinment-dev-AppointmentUnderscoreclLambdaFunctionQualifiedArn"
          }
        },
        "DocsLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "DocsLambdaVersionhJ7rCR9rr4QGFb1JnRUiZnFs0rz8YIYcLR60Eq0gp60"
          },
          "Export": {
            "Name": "sls-appoinment-dev-DocsLambdaFunctionQualifiedArn"
          }
        },
        "HttpApiId": {
          "Description": "Id of the HTTP API",
          "Value": {
            "Ref": "HttpApi"
          },
          "Export": {
            "Name": "sls-appoinment-dev-HttpApiId"
          }
        },
        "HttpApiUrl": {
          "Description": "URL of the HTTP API",
          "Value": {
            "Fn::Join": [
              "",
              [
                "https://",
                {
                  "Ref": "HttpApi"
                },
                ".execute-api.",
                {
                  "Ref": "AWS::Region"
                },
                ".",
                {
                  "Ref": "AWS::URLSuffix"
                }
              ]
            ]
          },
          "Export": {
            "Name": "sls-appoinment-dev-HttpApiUrl"
          }
        }
      }
    }
  }
}